STORE 选项的实现
--------------------

在默认情况下，
:ref:`SORT` 命令只向客户端返回排序结果，
而不保存排序结果：

::

    redis> SADD students "peter" "jack" "tom"
    (integer) 3

    redis> SORT students ALPHA
    1) "jack"
    2) "peter"
    3) "tom"

但是，
通过使用 ``STORE`` 选项，
我们可以将排序结果保存在指定的键里面，
并在有需要时重用这个排序结果：

::

    redis> SORT students ALPHA STORE sorted_students
    (integer) 3

    redis> LRANGE sorted_students 0 -1
    1) "jack"
    2) "peter"
    3) "tom"

服务器执行 ``SORT students ALPHA STORE sorted_students`` 命令的详细步骤如下：

1. 创建一个 ``redisSortObject`` 结构数组，
   数组的长度等于 ``students`` 集合的大小。

2. 遍历数组，
   将各个数组项的 ``obj`` 指针分别指向 ``students`` 集合的各个元素。

3. 根据 ``obj`` 指针所指向的集合元素，
   对数组进行字符串排序，
   排序后的数组如图 21-19 所示：

   - 被排序到数组索引 ``0`` 位置的是 ``"jack"`` 元素。

   - 被排序到数组索引 ``1`` 位置的是 ``"peter"`` 元素。

   - 被排序到数组索引 ``2`` 位置的是 ``"tom"`` 元素。

4. 检查 ``sorted_students`` 键是否存在，
   如果存在的话，
   那么删除该键。

5. 设置 ``sorted_students`` 为空白的列表键。

6. 遍历数组，
   将排序后的三个元素 ``"jack"`` 、 ``"peter"`` 和 ``"tom"`` 依次推入 ``sorted_students`` 列表的末尾，
   相当于执行命令 ``RPUSH sorted_students "jack" "peter" "tom"`` 。

7. 遍历数组，
   向客户端返回 ``"jack"`` 、 ``"peter"`` 、 ``"tom"`` 三个元素。

.. graphviz::

    digraph {

        rankdir = LR;

        subgraph cluster_students {

            label = "students 集合";

            style = dashed;

            node [shape = box];

            peter [label = "StringObject \n \"peter\""];

            jack [label = "StringObject \n \"jack\""];

            tom [label = "StringObject \n \"tom\""];

            peter -> jack -> tom [style = invis];

        }

        node [shape = record];

        array [label = " array | { array[0] \n redisSortObject | { <obj0> obj | u } } | { array[1] \n redisSortObject | { <obj1> obj | u } } | { array[2] \n redisSortObject | { <obj2> obj | u } } "];

        array:obj0 -> jack;
        array:obj1 -> peter;
        array:obj2 -> tom;

        label = "\n 图 21-19    排序之后的数组";

    }

:ref:`SORT` 命令在执行其他带有 ``STORE`` 选项的排序操作时， 执行的步骤也和这里给出的步骤类似。
