ASC 选项和 DESC 选项的实现
----------------------------

在默认情况下，
:ref:`SORT` 命令执行升序排序，
排序后的结果按值的大小从小到大排列，
以下两个命令是完全等价的：

::

    SORT <key>

    SORT <key> ASC

相反地，
在执行 :ref:`SORT` 命令时使用 ``DESC`` 选项，
可以让命令执行降序排序，
让排序后的结果按值的大小从大到小排列：

::

    SORT <key> DESC

以下是两个对 ``numbers`` 列表进行升序排序的例子，
第一个命令根据默认设置，
对 ``numbers`` 列表进行升序排序，
而第二个命令则通过显式地使用 ``ALPHA`` 选项，
对 ``numbers`` 列表进行升序排序，
两个命令产生的结果完全一样：


::

    redis> RPUSH numbers 3 1 2
    (integer) 3

    redis> SORT numbers
    1) "1"
    2) "2"
    3) "3"

    redis> SORT numbers ASC
    1) "1"
    2) "2"
    3) "3"

与升序排序相反，
以下是一个对 ``numbers`` 列表进行降序排序的例子：

::

    redis> SORT numbers DESC
    1) "3"
    2) "2"
    3) "1"

升序排序和降序排序都由相同的快速排序算法执行，
它们之间的不同之处在于：

- 在执行升序排序时，
  排序算法使用的对比函数产生升序对比结果。

- 而在执行降序排序时，
  排序算法所使用的对比函数产生降序对比结果。

因为升序对比和降序对比的结果正好相反，
所以它们会产生元素排列方式正好相反的两种排序结果。

..
    升序排序和降序排序都由相同的快速排序算法执行，
    它们之间的不同之处在于：

    - 在执行升序排序时，
      排序算法所使用的对比函数产生升序对比结果：

        1. 如果值 ``x`` 大于值 ``y`` ，
           那么函数返回 ``1`` 。

        2. 如果值 ``x`` 小于值 ``y`` ，
           那么函数返回 ``-1`` 。

        3. 如果值 ``x`` 和值 ``y`` 相等，
           那么函数返回 ``0`` 。

    - 在执行降序排序时，
      排序算法所使用的对比函数产生降序对比结果：

        1. 如果值 ``x`` 大于值 ``y`` ，
           那么函数返回 ``-1`` 。

        2. 如果值 ``x`` 小于值 ``y`` ，
           那么函数返回 ``1`` 。

        3. 如果值 ``x`` 和值 ``y`` 相等，
           那么函数返回 ``0`` 。

    排序算法所使用的对比函数可以根据 ``DESC`` 选项的使用情况，
    自动产生升序对比结果或者降序对比结果：

    .. code-block:: python

        def compare(x, y):

            if ALPHA:
                # 命令使用了 ALPHA 选项，进行字符串对比
                result = compare_string(x, y)
            else:
                # 命令没有使用 ALPHA 选项，进行数字值对比
                result = compare_number(x, y)

            if DESC:
                # compare_string 和 compare_number 都产生升序对比结果
                # 如果命令使用了 DESC 选项，那么通过将升序对比结果求负来产生降序对比结果
                result = (- result)

            return result

    因为升序对比和降序对比的结果正好相反，
    所以它们会产生元素排列方式正好相反的两种排序结果：

    - 升序排序按元素的大小从小到大排列元素。

    - 而降序排序则按元素的大小从大到小排列元素。

以 ``numbers`` 列表为例：

- 图 21-7 展示了 :ref:`SORT` 命令在对 ``numbers`` 列表执行升序排序时所创建的数组。

- 图 21-8 展示了 :ref:`SORT` 命令在对 ``numbers`` 列表执行降序排序时所创建的数组。

.. graphviz::

    digraph {

        rankdir = LR;

        node [shape = record];

        subgraph cluster_numbers {

            label = "numbers 链表"

            style = dashed

            one [label = "StringObject \n \"1\""];
            two [label = "StringObject \n \"2\""];
            three [label = "StringObject \n \"3\""];

            three -> one -> two;

        }

        subgraph cluster_array {

            style = invis;

            array [label = " array | { <array0> array[0] \n redisSortObject | { <obj0> obj | u.score \n 1.0 } } | { <array1> array[1] \n redisSortObject | { <obj1> obj | u.score \n 2.0 } } | { <array2> array[2] \n redisSortObject | { <obj2> obj | u.score \n 3.0 } } "];
        }
       array:obj0 -> one;
       array:obj1 -> two;
       array:obj2 -> three;

       label = "\n 图 21-7    执行升序排序的数组";

    }

.. graphviz::

    digraph {

        rankdir = LR;

        node [shape = record];

        subgraph cluster_numbers {

            label = "numbers 链表"

            style = dashed;

            one [label = "StringObject \n \"1\""];
            two [label = "StringObject \n \"2\""];
            three [label = "StringObject \n \"3\""];

            three -> one -> two;

        }

        subgraph cluster_array {

            style = invis;

            array [label = " array | { <array0> array[0] \n redisSortObject | { <obj0> obj | u.score \n 3.0 } } | { <array1> array[1] \n redisSortObject | { <obj1> obj | u.score \n 2.0 } } | { <array2> array[2] \n redisSortObject | { <obj2> obj | u.score \n 1.0 } } "];
        }
       array:obj0 -> three;
       array:obj1 -> two;
       array:obj2 -> one;

       label = "\n 图 21-8    执行降序排序的数组";

    }



