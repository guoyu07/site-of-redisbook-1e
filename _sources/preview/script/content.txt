Lua 脚本
=========================

Redis 从 2.6 版本开始引入对 Lua 脚本的支持：
通过在服务器中嵌入 Lua 环境，
Redis 客户端可以使用 Lua 脚本，
直接在服务器端原子地执行多个 Redis 命令。

其中，
使用 :ref:`EVAL` 命令可以直接对输入的脚本进行求值：

::

    redis> EVAL "return 'hello world'" 0
    "hello world"

而使用 :ref:`EVALSHA` 命令则可以根据脚本的 SHA1 校验和来对脚本进行值，
但这个命令要求校验和对应的脚本必须至少被 :ref:`EVAL` 命令执行过一次：

::

    redis> EVAL "return 1+1" 0
    (integer) 2

    redis> EVALSHA "a27e7e8a43702b7046d4f6a7ccf5b60cef6b9bd9" 0    // 上一个脚本的校验和
    (integer) 2

或者这个校验和对应的脚本曾经被 :ref:`SCRIPT_LOAD` 命令载入过：

::

    redis> SCRIPT LOAD "return 2*2"
    "4475bfb5919b5ad16424cb50f74d4724ae833e72"

    redis> EVALSHA "4475bfb5919b5ad16424cb50f74d4724ae833e72" 0
    (integer) 4

本章将对 Redis 服务器中与 Lua 脚本有关的各个部分进行介绍。

首先，
本章将介绍 Redis 服务器初始化 Lua 环境的整个过程，
说明 Redis 对 Lua 环境进行了哪些修改，
而这些修改又对用户执行 Lua 脚本产生了什么影响和限制。

接着，
本章将介绍与 Lua 环境进行协作的两个组件，
它们分别是负责执行 Lua 脚本中包含的 Redis 命令的伪客户端，
以及负责保存传入服务器的 Lua 脚本的脚本字典：
了解伪客户端可以知道脚本中的 Redis 命令在执行时，
服务器与 Lua 环境的交互过程，
而了解脚本字典则有助于理解 :ref:`SCRIPT_EXISTS` 命令和脚本复制功能的实现原理。

在这之后，
本章将介绍 :ref:`EVAL` 命令和 :ref:`EVALSHA` 命令的实现原理，
说明 Lua 脚本在 Redis 服务器中是如何被执行的，
并对管理脚本的四个命令 ——
:ref:`SCRIPT_FLUSH` 命令、
:ref:`SCRIPT_EXISTS` 命令、
:ref:`SCRIPT_LOAD` 命令、
:ref:`SCRIPT_KILL` 命令的实现原理进行介绍。

最后，
本章将以介绍 Redis 在主从服务器之间复制 Lua 脚本的方法作为本章的结束。
